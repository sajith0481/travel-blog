{"ast":null,"code":"/*Register.js is a new component that will be used to register new users. It will contain a form with fields for email, username, and password. When the form is submitted, it will make an API call to register the user. If the registration is successful, the user will be navigated to the login page.*/\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { RegistrationAPI } from '../utils/Api';\n\n/*\r\nfunction Register() {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const navigate = useNavigate();  // Create navigate function instance\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        \r\n        // Here you would normally handle registration\r\n        // For example, calling an API to register the user\r\n        try {\r\n            console.log(username, email, password);\r\n            const response = await RegistrationAPI({ username, email, password });  // Replace with actual API call\r\n            if (response.ok) {\r\n                // Navigate to login page or anywhere else post-registration\r\n                navigate('/login');\r\n            } else {\r\n                // Handle errors if registration was unsuccessful\r\n                console.error('Registration failed:', response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during registration:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label>\r\n                Email:\r\n                <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n            </label>\r\n            <label>\r\n                Username:\r\n                <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n            </label>\r\n            <label>\r\n                Password:\r\n                <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n            </label>\r\n            <button type=\"submit\">Register</button>\r\n        </form>\r\n    );\r\n}\r\n*/\nexport default Register;","map":{"version":3,"names":["React","useState","useNavigate","RegistrationAPI","Register"],"sources":["C:/Users/sajit/Documents/Sharanya_codes/TravelBlog/travel_blog_new/frontend/src/components/Register.js"],"sourcesContent":["/*Register.js is a new component that will be used to register new users. It will contain a form with fields for email, username, and password. When the form is submitted, it will make an API call to register the user. If the registration is successful, the user will be navigated to the login page.*/\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { RegistrationAPI } from '../utils/Api';\r\n\r\n/*\r\nfunction Register() {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const navigate = useNavigate();  // Create navigate function instance\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        \r\n        // Here you would normally handle registration\r\n        // For example, calling an API to register the user\r\n        try {\r\n            console.log(username, email, password);\r\n            const response = await RegistrationAPI({ username, email, password });  // Replace with actual API call\r\n            if (response.ok) {\r\n                // Navigate to login page or anywhere else post-registration\r\n                navigate('/login');\r\n            } else {\r\n                // Handle errors if registration was unsuccessful\r\n                console.error('Registration failed:', response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during registration:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label>\r\n                Email:\r\n                <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n            </label>\r\n            <label>\r\n                Username:\r\n                <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n            </label>\r\n            <label>\r\n                Password:\r\n                <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n            </label>\r\n            <button type=\"submit\">Register</button>\r\n        </form>\r\n    );\r\n}\r\n*/\r\nexport default Register;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,eAAe,QAAQ,cAAc;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}