{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sajit\\\\Documents\\\\Sharanya_codes\\\\TravelBlog\\\\travel_blog_new\\\\frontend\\\\src\\\\components\\\\NewPost.js\",\n  _s = $RefreshSig$();\n// NewPost component is a form that allows users to create new posts. The form has input fields for the title and content of the post. When the form is submitted, the handleSubmit function is called, which makes a POST request to the /api/posts endpoint with the post data. The post data is constructed from the title and content state variables using the useState hook.\nimport React, { useState, useContext } from 'react';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewPost() {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const {\n    user\n  } = useContext(UserContext); // Assuming user context provides the token\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const postData = {\n      title,\n      content,\n      author_id: 1\n    }; // Assuming author_id is static for example\n\n    try {\n      const response = await fetch('http://localhost:3001/posts/api/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}` // Include the token in the header\n        },\n        body: JSON.stringify(postData)\n      });\n      console.log('Full response:', response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Post created:', data);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Content:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: content,\n        onChange: e => setContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Create Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(NewPost, \"RT7YFVwS/p9ViEZpY6VyOG3RpFw=\");\n_c = NewPost;\nexport default NewPost;\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["React","useState","useContext","UserContext","jsxDEV","_jsxDEV","NewPost","_s","title","setTitle","content","setContent","user","handleSubmit","event","preventDefault","postData","author_id","response","fetch","method","headers","token","body","JSON","stringify","console","log","ok","Error","status","data","json","error","onSubmit","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sajit/Documents/Sharanya_codes/TravelBlog/travel_blog_new/frontend/src/components/NewPost.js"],"sourcesContent":["// NewPost component is a form that allows users to create new posts. The form has input fields for the title and content of the post. When the form is submitted, the handleSubmit function is called, which makes a POST request to the /api/posts endpoint with the post data. The post data is constructed from the title and content state variables using the useState hook.\r\nimport React, { useState, useContext } from 'react';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nfunction NewPost() {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const { user } = useContext(UserContext); // Assuming user context provides the token\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const postData = { title, content, author_id: 1 }; // Assuming author_id is static for example\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/posts/api/', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${user.token}` // Include the token in the header\r\n        },\r\n        body: JSON.stringify(postData),\r\n      });\r\n\r\n      console.log('Full response:', response);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      console.log('Post created:', data);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>Title:<input type=\"text\" value={title} onChange={e => setTitle(e.target.value)} /></label>\r\n      <label>Content:<textarea value={content} onChange={e => setContent(e.target.value)} /></label>\r\n      <button type=\"submit\">Create Post</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default NewPost;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM;IAAEW;EAAK,CAAC,GAAGV,UAAU,CAACC,WAAW,CAAC,CAAC,CAAC;;EAE1C,MAAMU,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,QAAQ,GAAG;MAAER,KAAK;MAAEE,OAAO;MAAEO,SAAS,EAAE;IAAE,CAAC,CAAC,CAAC;;IAEnD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAAST,IAAI,CAACU,KAAM,EAAC,CAAC;QAC1C,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;MAC/B,CAAC,CAAC;MAEFU,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAET,QAAQ,CAAC;MACvC,IAAI,CAACA,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBX,QAAQ,CAACY,MAAO,EAAC,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAClCN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEI,IAAI,CAAC;IACpC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,oBACE5B,OAAA;IAAM6B,QAAQ,EAAErB,YAAa;IAAAsB,QAAA,gBAC3B9B,OAAA;MAAA8B,QAAA,GAAO,QAAM,eAAA9B,OAAA;QAAO+B,IAAI,EAAC,MAAM;QAACC,KAAK,EAAE7B,KAAM;QAAC8B,QAAQ,EAAEC,CAAC,IAAI9B,QAAQ,CAAC8B,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACjGvC,OAAA;MAAA8B,QAAA,GAAO,UAAQ,eAAA9B,OAAA;QAAUgC,KAAK,EAAE3B,OAAQ;QAAC4B,QAAQ,EAAEC,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC9FvC,OAAA;MAAQ+B,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEX;AAACrC,EAAA,CArCQD,OAAO;AAAAuC,EAAA,GAAPvC,OAAO;AAuChB,eAAeA,OAAO;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}