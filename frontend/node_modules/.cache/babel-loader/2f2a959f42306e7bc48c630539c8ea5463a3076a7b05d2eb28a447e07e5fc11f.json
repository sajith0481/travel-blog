{"ast":null,"code":"// src/utils/Api.js\n// Simulated API functions for registration and login\n\nconst users = [{\n  username: \"user1\",\n  password: \"pass1\",\n  token: \"token123\"\n}, {\n  username: \"user2\",\n  password: \"pass2\",\n  token: \"token456\"\n}];\n\n// src/utils/Api.js\nconst LoginAPI = async ({\n  username,\n  password\n}) => {\n  try {\n    const response = await fetch('http://localhost:3000/posts/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        ok: true,\n        token: data.accessToken\n      };\n    } else {\n      return {\n        ok: false,\n        statusText: data.message || \"Invalid username or password\"\n      };\n    }\n  } catch (error) {\n    return {\n      ok: false,\n      statusText: \"Network error\"\n    };\n  }\n};\n\n// Simulated API function\n_c = LoginAPI;\nconst RegistrationAPI = async userData => {\n  // Simulate network delay\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate API response\n      if (userData.username !== \"exists\") {\n        // Simulating a successful registration unless username is \"exists\"\n        resolve({\n          ok: true\n        });\n      } else {\n        reject({\n          ok: false,\n          statusText: \"Username already exists\"\n        });\n      }\n    }, 1000);\n  });\n};\n_c2 = RegistrationAPI;\nexport { RegistrationAPI };\nexport { LoginAPI };\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginAPI\");\n$RefreshReg$(_c2, \"RegistrationAPI\");","map":{"version":3,"names":["users","username","password","token","LoginAPI","response","fetch","method","headers","body","JSON","stringify","data","json","ok","accessToken","statusText","message","error","_c","RegistrationAPI","userData","Promise","resolve","reject","setTimeout","_c2","$RefreshReg$"],"sources":["C:/Users/sajit/Documents/Sharanya_codes/TravelBlog/travel_blog_new/frontend/src/utils/Api.js"],"sourcesContent":["// src/utils/Api.js\r\n// Simulated API functions for registration and login\r\n\r\nconst users = [\r\n    { username: \"user1\", password: \"pass1\", token: \"token123\" },\r\n    { username: \"user2\", password: \"pass2\", token: \"token456\" }\r\n];\r\n\r\n// src/utils/Api.js\r\nconst LoginAPI = async ({ username, password }) => {\r\n    try {\r\n        const response = await fetch('http://localhost:3000/posts/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, password })\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            return { ok: true, token: data.accessToken };\r\n        } else {\r\n            return { ok: false, statusText: data.message || \"Invalid username or password\" };\r\n        }\r\n    } catch (error) {\r\n        return { ok: false, statusText: \"Network error\" };\r\n    }\r\n};\r\n\r\n\r\n\r\n// Simulated API function\r\nconst RegistrationAPI = async (userData) => {\r\n    // Simulate network delay\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            // Simulate API response\r\n            if (userData.username !== \"exists\") {  // Simulating a successful registration unless username is \"exists\"\r\n                resolve({ ok: true });\r\n            } else {\r\n                reject({ ok: false, statusText: \"Username already exists\" });\r\n            }\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nexport { RegistrationAPI };\r\nexport { LoginAPI };\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,KAAK,GAAG,CACV;EAAEC,QAAQ,EAAE,OAAO;EAAEC,QAAQ,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAW,CAAC,EAC3D;EAAEF,QAAQ,EAAE,OAAO;EAAEC,QAAQ,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAW,CAAC,CAC9D;;AAED;AACA,MAAMC,QAAQ,GAAG,MAAAA,CAAO;EAAEH,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAC/C,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,QAAQ;QAAEC;MAAS,CAAC;IAC/C,CAAC,CAAC;IAEF,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACb,OAAO;QAAEA,EAAE,EAAE,IAAI;QAAEX,KAAK,EAAES,IAAI,CAACG;MAAY,CAAC;IAChD,CAAC,MAAM;MACH,OAAO;QAAED,EAAE,EAAE,KAAK;QAAEE,UAAU,EAAEJ,IAAI,CAACK,OAAO,IAAI;MAA+B,CAAC;IACpF;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO;MAAEJ,EAAE,EAAE,KAAK;MAAEE,UAAU,EAAE;IAAgB,CAAC;EACrD;AACJ,CAAC;;AAID;AAAAG,EAAA,GAvBMf,QAAQ;AAwBd,MAAMgB,eAAe,GAAG,MAAOC,QAAQ,IAAK;EACxC;EACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCC,UAAU,CAAC,MAAM;MACb;MACA,IAAIJ,QAAQ,CAACpB,QAAQ,KAAK,QAAQ,EAAE;QAAG;QACnCsB,OAAO,CAAC;UAAET,EAAE,EAAE;QAAK,CAAC,CAAC;MACzB,CAAC,MAAM;QACHU,MAAM,CAAC;UAAEV,EAAE,EAAE,KAAK;UAAEE,UAAU,EAAE;QAA0B,CAAC,CAAC;MAChE;IACJ,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC,CAAC;AACN,CAAC;AAACU,GAAA,GAZIN,eAAe;AAcrB,SAASA,eAAe;AACxB,SAAShB,QAAQ;AAAG,IAAAe,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}