{"ast":null,"code":"// src/utils/Api.js\n// Simulated API functions for registration and login\n\n// src/utils/Api.js\nconst LoginAPI = async ({\n  username,\n  password\n}) => {\n  try {\n    console.log({\n      username,\n      password\n    }); // Debugging line\n\n    const response = await fetch('http://localhost:3000/posts/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n    console.log('API Response:', response, data);\n    if (response.ok) {\n      return {\n        ok: true,\n        token: data.accessToken,\n        user: data.user\n      };\n    } else {\n      return {\n        ok: false,\n        statusText: data.message || \"Invalid username or password\"\n      };\n    }\n  } catch (error) {\n    return {\n      ok: false,\n      statusText: \"Network error\"\n    };\n  }\n};\n\n/*\r\n// Old  API function\r\nconst RegistrationAPI = async ({ username, email, password }) => {\r\n    try {\r\n        const response = await fetch('http://localhost:3000/posts/register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, email, password })  // Include email in the payload\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            return { ok: true };\r\n        } else {\r\n            return { ok: false, statusText: data.message || \"Username or email already exists\" };\r\n        }\r\n    } catch (error) {\r\n        return { ok: false, statusText: \"Network error\" };\r\n    }\r\n};\r\n\r\n*/\n\n// Updated API function to include secretKey\n_c = LoginAPI;\nconst RegistrationAPI = async ({\n  username,\n  email,\n  password,\n  secretKey\n}) => {\n  try {\n    const response = await fetch('http://localhost:3000/posts/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password,\n        secretKey\n      }) // Now includes secretKey\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        ok: true\n      };\n    } else {\n      return {\n        ok: false,\n        statusText: data.message || \"Registration failed\"\n      };\n    }\n  } catch (error) {\n    return {\n      ok: false,\n      statusText: \"Network error\"\n    };\n  }\n};\n_c2 = RegistrationAPI;\nexport { RegistrationAPI };\nexport { LoginAPI };\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginAPI\");\n$RefreshReg$(_c2, \"RegistrationAPI\");","map":{"version":3,"names":["LoginAPI","username","password","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","ok","token","accessToken","user","statusText","message","error","_c","RegistrationAPI","email","secretKey","_c2","$RefreshReg$"],"sources":["C:/Users/sajit/Documents/Sharanya_codes/TravelBlog/travel_blog_new/frontend/src/utils/Api.js"],"sourcesContent":["// src/utils/Api.js\r\n// Simulated API functions for registration and login\r\n\r\n\r\n// src/utils/Api.js\r\nconst LoginAPI = async ({ username, password }) => {\r\n    try {\r\n        console.log({ username, password });  // Debugging line\r\n\r\n        const response = await fetch('http://localhost:3000/posts/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, password })\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log('API Response:', response, data);\r\n\r\n        if (response.ok) {\r\n            return { ok: true, token: data.accessToken, user: data.user };\r\n        } else {\r\n            return { ok: false, statusText: data.message || \"Invalid username or password\" };\r\n        }\r\n    } catch (error) {\r\n        return { ok: false, statusText: \"Network error\" };\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n/*\r\n// Old  API function\r\nconst RegistrationAPI = async ({ username, email, password }) => {\r\n    try {\r\n        const response = await fetch('http://localhost:3000/posts/register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, email, password })  // Include email in the payload\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            return { ok: true };\r\n        } else {\r\n            return { ok: false, statusText: data.message || \"Username or email already exists\" };\r\n        }\r\n    } catch (error) {\r\n        return { ok: false, statusText: \"Network error\" };\r\n    }\r\n};\r\n\r\n*/\r\n\r\n// Updated API function to include secretKey\r\nconst RegistrationAPI = async ({ username, email, password, secretKey }) => {\r\n    try {\r\n        const response = await fetch('http://localhost:3000/posts/register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, email, password, secretKey })  // Now includes secretKey\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            return { ok: true };\r\n        } else {\r\n            return { ok: false, statusText: data.message || \"Registration failed\" };\r\n        }\r\n    } catch (error) {\r\n        return { ok: false, statusText: \"Network error\" };\r\n    }\r\n};\r\n\r\n\r\n\r\nexport { RegistrationAPI };\r\nexport { LoginAPI };\r\n"],"mappings":"AAAA;AACA;;AAGA;AACA,MAAMA,QAAQ,GAAG,MAAAA,CAAO;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAC/C,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC;MAAEH,QAAQ;MAAEC;IAAS,CAAC,CAAC,CAAC,CAAE;;IAEtC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,QAAQ;QAAEC;MAAS,CAAC;IAC/C,CAAC,CAAC;IAEF,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCV,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,EAAEO,IAAI,CAAC;IAE5C,IAAIP,QAAQ,CAACS,EAAE,EAAE;MACb,OAAO;QAAEA,EAAE,EAAE,IAAI;QAAEC,KAAK,EAAEH,IAAI,CAACI,WAAW;QAAEC,IAAI,EAAEL,IAAI,CAACK;MAAK,CAAC;IACjE,CAAC,MAAM;MACH,OAAO;QAAEH,EAAE,EAAE,KAAK;QAAEI,UAAU,EAAEN,IAAI,CAACO,OAAO,IAAI;MAA+B,CAAC;IACpF;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO;MAAEN,EAAE,EAAE,KAAK;MAAEI,UAAU,EAAE;IAAgB,CAAC;EACrD;AACJ,CAAC;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAG,EAAA,GArDMrB,QAAQ;AAsDd,MAAMsB,eAAe,GAAG,MAAAA,CAAO;EAAErB,QAAQ;EAAEsB,KAAK;EAAErB,QAAQ;EAAEsB;AAAU,CAAC,KAAK;EACxE,IAAI;IACA,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,QAAQ;QAAEsB,KAAK;QAAErB,QAAQ;QAAEsB;MAAU,CAAC,CAAC,CAAE;IACpE,CAAC,CAAC;IAEF,MAAMZ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACb,OAAO;QAAEA,EAAE,EAAE;MAAK,CAAC;IACvB,CAAC,MAAM;MACH,OAAO;QAAEA,EAAE,EAAE,KAAK;QAAEI,UAAU,EAAEN,IAAI,CAACO,OAAO,IAAI;MAAsB,CAAC;IAC3E;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO;MAAEN,EAAE,EAAE,KAAK;MAAEI,UAAU,EAAE;IAAgB,CAAC;EACrD;AACJ,CAAC;AAACO,GAAA,GAnBIH,eAAe;AAuBrB,SAASA,eAAe;AACxB,SAAStB,QAAQ;AAAG,IAAAqB,EAAA,EAAAI,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}